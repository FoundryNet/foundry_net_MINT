FoundryNet
Turn your manufacturing machines into economic actors. Earn MINT tokens for verified productive work.
FoundryNet uses Proof of Productivity to reward 3D printers, CNCs, robots, and any production equipment with cryptocurrency for completing jobs. No staking, no capital requiredâ€”just connect your machine and start earning.
Quick Start (10 Lines)
bash# Install
npm install foundrynet-client

# Initialize (creates machine ID + registers)
node
> const { FoundryClient } = require('foundrynet-client');
> const client = new FoundryClient({ apiUrl: 'https://api.foundrynet.io/v1' });
> await client.init({ type: 'printer', model: 'Ender 3' });

# Complete a job and earn 3 MINT
> const jobHash = `job_${Date.now()}`;
> await client.submitJob(jobHash);
> await client.completeJob(jobHash, 'YOUR_SOLANA_WALLET_ADDRESS');
// Earned 3 MINT!
That's it. Your machine is now earning.

How It Works
1. Register Your Machine
Connect any machine that can make HTTP requests and sign messages (ed25519).
Supported:

3D Printers (OctoPrint, Klipper, Marlin)
CNC Mills/Routers (GRBL, LinuxCNC)
Laser Cutters
Pick-and-Place Robots
Custom DIY machines

2. Submit Jobs
When your machine starts productive work:
javascriptconst jobHash = client.generateJobHash('my_part.gcode');
await client.submitJob(jobHash, {
  job_type: 'print',
  filename: 'benchy.gcode'
});
3. Earn MINT
When work completes successfully:
javascriptawait client.completeJob(jobHash, yourSolanaWallet);
// Instant payout: 3 MINT per job
Current Rewards:

Year 1: 3 MINT per job
Year 2: 2 MINT per job (50% halving)
Year 3: 1 MINT per job
Max: 400 MINT per machine per 24 hours


Integration Examples
OctoPrint Plugin
pythonimport foundrynet

# In plugin initialization
client = foundrynet.Client(api_url=FOUNDRY_API)
client.init(metadata={'type': 'printer', 'model': 'Prusa MK3'})

# On print start
def on_print_started(filename):
    job_hash = client.generate_job_hash(filename)
    client.submit_job(job_hash, {'filename': filename})
    
# On print complete
def on_print_done(job_hash):
    client.complete_job(job_hash, user_wallet)
Klipper/Moonraker
python# In moonraker.conf
[foundrynet]
enabled: True
wallet: YOUR_SOLANA_WALLET

# Webhook integration (automatic)
GRBL/CNC
javascript// On program start (M0/M30)
const jobHash = generateJobHash(programName);
await client.submitJob(jobHash, { type: 'cnc', program: programName });

// On program complete
await client.completeJob(jobHash, wallet);
Custom/DIY
javascript// Your machine, your rules
const client = new FoundryClient({ apiUrl: FOUNDRY_API });
await client.init({ type: 'custom', model: 'My Robot' });

// When task starts
const job = await client.submitJob(`task_${taskId}`);

// When task completes
await client.completeJob(job.job_hash, wallet);

API Reference
FoundryClient(config)
javascriptconst client = new FoundryClient({
  apiUrl: 'https://api.foundrynet.io/v1',
  retryAttempts: 3,      // Network retry count
  retryDelay: 2000,      // ms between retries
  debug: false           // Enable verbose logging
});
client.init(metadata)
Initialize machine (loads existing credentials or generates new ones).
javascriptawait client.init({
  type: 'printer',       // printer|cnc|robot|laser|custom
  model: 'Ender 3 V2',
  firmware: 'Klipper'
});
// Saves credentials to localStorage/.foundry_credentials.json
client.submitJob(jobHash, payload)
Register job start.
javascriptawait client.submitJob('job_unique_hash', {
  job_type: 'print',
  filename: 'part.gcode',
  estimated_time: 3600
});
client.completeJob(jobHash, recipientWallet)
Complete job and earn MINT.
javascriptconst result = await client.completeJob(
  'job_unique_hash',
  'YOUR_SOLANA_WALLET'
);
// result.reward = 3
// result.tx_signature = "5x7y..."
// result.solscan = "https://solscan.io/tx/..."
client.generateJobHash(filename, additionalData)
Generate deterministic job hash.
javascriptconst jobHash = client.generateJobHash('benchy.gcode');
// Returns: "job_abc123_1234567890"
client.checkHealth()
Check system status.
javascriptconst health = await client.checkHealth();
// health.status = "healthy" | "warning" | "error"
// health.treasury_balance = 50000

Rules & Limits

 3 MINT per completed job (Year 1)
 400 MINT maximum per machine per 24 hours
 Job must complete successfully (no failed/cancelled jobs)
 Each job hash must be unique (no replays)
 Signature timestamp must be within 5 minutes

What Counts as a Job?
Any discrete unit of productive work:

One 3D print from start to finish
One CNC machining operation
One robot task cycle
One laser cut/engrave job

What Doesn't Count?

Machine idle time
Calibration/homing
Test runs
Failed or cancelled jobs


Tokenomics
Total Supply: 150M MINT (hard cap)
Halving Schedule:
YearReward/JobAnnual Emissions13 MINT~15M MINT22 MINT~10M MINT31 MINT~5M MINT40.5 MINT~2.5M MINT50.25 MINT~1.25M MINT6+0.125 MINT~0.6M MINT/year
Early advantage: Year 1 rewards are 50% higher than Year 2, and 3x higher than Year 3.

Security
Proof of Productivity (PoP)
Every job completion requires:

Unique job hash (prevents replay attacks)
Ed25519 signature from registered machine keypair
Recent timestamp (within 5 minutes)
Rate limiting (400 MINT/24hrs per machine)

Your Machine Keys

Generated locally on first init
Stored in .foundry_credentials.json or localStorage
Never leave your machine
Back them up securely

Anti-Fraud

Job hash uniqueness enforced on-chain
Signature verification prevents impersonation
Rate limits prevent spam
Future: reputation scoring, anomaly detection, community governance


Troubleshooting
"Job completion failed"

Check your machine credentials are loaded (client.init())
Verify job was submitted before completing
Ensure wallet address is valid Solana address

"Rate limit exceeded"

You've earned 400 MINT in the last 24 hours
Wait for the rolling window to reset
Check client.checkHealth() for current limits

"Signature verification failed"

Machine credentials may be corrupted
Delete .foundry_credentials.json and re-run init()
Ensure system time is accurate (for timestamps)

"Treasury depleted"

System maintenance in progress
Check status page: https://status.foundrynet.io
Jobs are queued and will process when treasury refills


Get Wallet (New to Crypto?)

Install Phantom Wallet (browser extension)
Create new wallet
Copy your Solana address
Use that address in completeJob()

MINT tokens appear instantly in your wallet after job completion.

Community & Support

Discord: https://discord.gg/foundrynet
Docs: https://docs.foundrynet.io
Status: https://status.foundrynet.io
GitHub: https://github.com/foundrynet

Found a bug? Open an issue or DM on Discord.
Want to contribute? We reward open-source contributions with MINT bounties.

Philosophy
FoundryNet believes physical production should be as open and permissionless as software.
We're building infrastructure where:

Machines are economic actors
Output = value
Proof = telemetry
Anyone can participate

This is autonomous industry. Manufacturing that pays for itself.
